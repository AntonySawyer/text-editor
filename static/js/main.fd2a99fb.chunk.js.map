{"version":3,"sources":["utils/StorageWorker.js","utils/prepareDataToSave.js","utils/domWorker.js","utils/tagsFilter.js","components/Tag/index.js","components/Tag/Tag.js","components/TagCloud/index.js","components/TagCloud/TagCloud.js","components/NotesList/index.js","components/NotesList/NotesList.js","components/NotesViewer/index.js","components/NotesViewer/NotesViewer.js","App.js","serviceWorker.js","index.js"],"names":["getData","key","JSON","parse","localStorage","getItem","checkData","notes","Object","keys","length","setItem","stringify","1","id","title","text","tags","saveData","data","modifyData","values","includes","newId","deleteData","firstId","dataList","ids","clearUnusedTags","tagsValues","used","forEach","split","tag","push","unused","filter","formatTag","input","document","getElementById","strToSave","value","trim","replace","getNoteObj","concat","innerText","collectTags","join","defineProperty","tagsArr","querySelectorAll","el","injectTags","note","map","t","uniqueArr","arr","toConsumableArray","Set","editStart","noteText","querySelector","setAttribute","classList","add","focusAtEnd","remove","style","editEnd","focus","window","getSelection","createRange","range","selectNodeContents","collapse","sel","removeAllRanges","addRange","body","createTextRange","textRange","moveToElementText","select","tagsFilter","obj","needed","result","Tag","_ref","react_default","a","createElement","className","onClick","TagCloud","TagsElements","components_Tag","type","placeholder","NotesList","activeNoteId","onChange","newNote","filterEnabled","NotesTitles","undefined","htmlFor","name","checked","components_TagCloud","NotesViewer","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","target","keyCode","highlightTags","container","content","matches","match","innerHTML","bindedTags","slicedMatches","slice","every","autoTagCreate","state","nextProps","_this2","_this$props","editNote","contentEditable","onKeyUp","React","Component","App","changeNote","DomWorker","reReadStorage","targetId","arguments","StorageWorker","noteTags","TagsFilter","dataToSave","PrepareData","emptyNote","newTagsNote","_this$state","savedTags","newTagsTotal","i","modifNote","filteredNotes","noteId","_this$state2","components_NotesList","components_NotesViewer","Boolean","location","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd2a99fb.chunk.js","sourcesContent":["export const getData = (key) => {\r\n  return JSON.parse(localStorage.getItem(key));\r\n};\r\n\r\nexport const checkData = () => {\r\n  const notes = getData('notes');\r\n  if (notes === null || Object.keys(notes).length === 0) {\r\n    localStorage.setItem('notes', JSON.stringify({ 1: { id: 1, title: 'Unnamed note №1', text: 'Click \"edit\" button!', tags: '' } }));\r\n  }\r\n  if (getData('tags') === null) {\r\n    localStorage.setItem('tags', JSON.stringify({}));\r\n  }\r\n}\r\n\r\nexport const saveData = (key, data, id) => {\r\n  const modifyData = getData(key);\r\n  switch (key) {\r\n    case 'tags':\r\n      if (!Object.values(modifyData).includes(data)) {\r\n        const idToSave = newId(key);\r\n        modifyData[idToSave] = data;\r\n      }\r\n      break;\r\n    case 'notes':\r\n      modifyData[id] = data[id];\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  localStorage.setItem(key, JSON.stringify(modifyData));\r\n}\r\n\r\nexport const deleteData = (key, id) => {\r\n  const modifyData = getData(key);\r\n  delete modifyData[id];\r\n  localStorage.setItem(key, JSON.stringify(modifyData));\r\n  checkData();\r\n}\r\n\r\nexport const firstId = (key) => {\r\n  const dataList = getData(key);\r\n  return Object.keys(dataList)[0];\r\n}\r\n\r\nexport const newId = (key) => {\r\n  const dataList = getData(key);\r\n  const ids = Object.keys(dataList);\r\n  return ids.length === 0 ? 1 : +ids[ids.length - 1] + 1;\r\n}\r\n\r\nexport const isExist = (id) => {\r\n  const notes = getData('notes');\r\n  return id in notes;\r\n}\r\n\r\nexport const clearUnusedTags = () => {\r\n  const notes = getData('notes');\r\n  const tags = getData('tags');\r\n  const tagsValues = Object.values(tags);\r\n  const used = [];\r\n  Object.keys(notes).forEach(id => notes[id].tags.split(',').forEach(tag => used.push(tag)));\r\n  const unused = tagsValues.filter(tag => !used.includes(tag));\r\n  Object.keys(tags).forEach(id => {\r\n    if (unused.includes(tags[id])) {\r\n      deleteData('tags', id);\r\n    }\r\n  })\r\n}","export const formatTag = () => {\r\n  const input = document.getElementById('newTadName');\r\n  const strToSave = input.value.trim().replace(/ /g, '_');\r\n  input.value = '';\r\n  return strToSave;\r\n}\r\n\r\nexport const getNoteObj = (id) => {\r\n  let title = document.getElementById('editNoteTitle').value;\r\n  if (title === '') {\r\n    title = `Unnamed note №${id}`;\r\n  }\r\n  const text = document.getElementById('noteText').innerText;\r\n  const tagsArr = collectTags();\r\n  const tags = tagsArr.join(',');\r\n  return {[id]: {id, title, text, tags}};\r\n}\r\n\r\nexport const collectTags = () => {\r\n  const tagsArr = [];\r\n  document.querySelectorAll('#noteTags span').forEach(el => tagsArr.push(el.innerText));\r\n  return tagsArr;\r\n}\r\n\r\nexport const injectTags = (note, tags) => {\r\n  tags.map(t => formatTag(t))\r\n  note.tags = uniqueArr(tags).join(',');\r\n  return {[note.id]: note};\r\n}\r\n\r\nexport const uniqueArr = (arr) => {\r\n  return [...new Set(arr)];\r\n}","export function editStart() {\r\n  const noteText = document.querySelector('.textArea');\r\n  noteText.setAttribute('contentEditable', true);\r\n  noteText.classList.add('editNoteText');\r\n  focusAtEnd(noteText);\r\n  document.getElementById('editBtn').classList.add('hidden');\r\n  document.getElementById('saveBtn').classList.remove('hidden');\r\n  document.querySelector('.notes-viewer > h1').style = \"display: none\";\r\n  document.getElementById('editNoteTitle').classList.remove('hidden');\r\n}\r\n\r\nexport function editEnd() {\r\n  const noteText = document.querySelector('.textArea');\r\n  noteText.setAttribute('contentEditable', false);\r\n  noteText.classList.remove('editNoteText');\r\n  document.getElementById('editBtn').classList.remove('hidden');\r\n  document.getElementById('saveBtn').classList.add('hidden');\r\n  document.querySelector('.notes-viewer > h1').style = {};\r\n  document.getElementById('editNoteTitle').classList.add('hidden');\r\n  document.getElementById('newNoteTitle').value = '';\r\n}\r\n\r\nexport function clearAllInputs() {\r\n  document.querySelector('.textArea').innerHTML = '';\r\n  document.getElementById('editNoteTitle').value = '';\r\n}\r\n\r\nexport function focusAtEnd(el) {\r\n  el.focus();\r\n  if (typeof window.getSelection != \"undefined\" &&\r\n    typeof document.createRange != \"undefined\"\r\n  ) {\r\n    const range = document.createRange();\r\n    range.selectNodeContents(el);\r\n    range.collapse(false);\r\n    const sel = window.getSelection();\r\n    sel.removeAllRanges();\r\n    sel.addRange(range);\r\n  } else if (typeof document.body.createTextRange != \"undefined\") {\r\n    const textRange = document.body.createTextRange();\r\n    textRange.moveToElementText(el);\r\n    textRange.collapse(false);\r\n    textRange.select();\r\n  }\r\n}","export default (obj, needed) => {\r\n  const result = {};\r\n  for (let key in obj) {\r\n    if (needed.includes(obj[key])) {\r\n      result[key] = obj[key];\r\n    }\r\n  }\r\n  return result;\r\n}\r\n","import Tag from './Tag';\r\n\r\nexport default Tag;","import React from 'react';\r\nimport './Tag.scss';\r\n\r\nexport default ({ title, deleteData, filter }) => {\r\n  return (\r\n    <div className=\"tag-wrapper\">\r\n      <span onClick={ filter }>{ title }</span>\r\n      <button className=\"btn btn-red\" onClick={ deleteData }>del</button>\r\n    </div>\r\n  )\r\n}","import TagCloud from './TagCloud';\r\n\r\nexport default TagCloud;","import React from 'react';\r\n\r\nimport Tag from '../Tag';\r\n\r\nexport default ({ tags, deleteData, saveData, filter }) => {\r\n\r\n  const TagsElements = [];\r\n  Object.keys(tags).forEach(id => {\r\n    TagsElements.push(<Tag key={id} title={tags[id]} filter={() => filter(id)} \r\n                          deleteData={() => deleteData('tags', id) } />);\r\n  });\r\n  return (\r\n    <div className=\"tag-cloud\">\r\n      <input type=\"text\" id=\"newTadName\" placeholder=\"Type new tag here...\" />\r\n      <button className=\"btn btn-green\" onClick={() => saveData('tags')}>Add</button>\r\n      <div>\r\n        {TagsElements}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import NotesList from './NotesList';\r\n\r\nexport default NotesList;","import React from 'react';\r\n\r\nimport TagCloud from '../TagCloud';\r\nimport './NotesList.scss';\r\n\r\n\r\n\r\nexport default ({ activeNoteId, notes, tags, onChange, deleteData, saveData, newNote, filter, filterEnabled }) => {\r\n  const NotesTitles = [];\r\n  Object.keys(notes).forEach(id => {\r\n    NotesTitles.push(<li key={id} className={activeNoteId === id ? 'active' : undefined}>\r\n      <label htmlFor={`note_${id}`}>{notes[id].title}</label>\r\n      <input type=\"radio\" id={`note_${id}`} name=\"notesTitles\" \r\n        checked={+id === +activeNoteId} \r\n        onChange={() => onChange({ id })} />\r\n    </li>);\r\n  });\r\n  return (\r\n    <div className=\"notes-list\">\r\n      <h1>Notes</h1>\r\n      <input type=\"text\" id=\"newNoteTitle\" placeholder=\"Add new note title...\" />\r\n      <button className=\"btn btn-green\" onClick={ newNote }>New</button>\r\n      <ul>\r\n        { NotesTitles }\r\n      </ul>\r\n      <span>Filter by: { filterEnabled || 'none' }</span>\r\n      <button onClick={() => filter(null)} className=\"btn btn-inverted\">X</button>\r\n      <TagCloud tags={tags} deleteData={deleteData} saveData={saveData} filter={filter} />\r\n    </div>\r\n  )\r\n}","import NotesViewer from './NotesViewer';\r\n\r\nexport default NotesViewer;","import React from 'react';\r\nimport Tag from '../Tag';\r\nimport { focusAtEnd } from '../../utils/domWorker';\r\nimport { collectTags } from '../../utils/prepareDataToSave';\r\nimport './NotesViewer.scss';\r\n\r\nexport default class NotesViewer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { title: this.props.note.title };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (document.querySelector('p[contenteditable=\"true\"]') === null) {\r\n      this.highlightTags();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (document.querySelector('p[contenteditable=\"true\"]') === null) {\r\n      this.highlightTags();\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({ title: nextProps.note.title });\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n    const keyCodesForAdd = [8, 32];\r\n    if (event.target.id === 'noteText' && keyCodesForAdd.includes(event.keyCode)) {\r\n      this.highlightTags();\r\n    }\r\n  }\r\n\r\n  highlightTags = () => {\r\n    const container = document.getElementById('noteText');\r\n    const content = container.innerText;\r\n    const matches = content.match(/(#[^\\s]+)/g);\r\n    if (matches !== null) {\r\n      container.innerHTML = content.replace(/(#[^\\s]+)/g, `<span class=\"hightlight\">$1</span>`);\r\n      const bindedTags = collectTags();\r\n      const slicedMatches = matches.map(el => el.slice(1));\r\n      if (!slicedMatches.every(el => bindedTags.includes(el)) || !bindedTags.every(el => slicedMatches.includes(el))) {\r\n        this.props.autoTagCreate(slicedMatches);\r\n      }\r\n      if (document.querySelector(':focus') !== null && document.querySelector(':focus').id === 'noteText') {\r\n        focusAtEnd(container);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { note, tags, editNote, saveData, deleteData, filter } = this.props;\r\n\r\n    const TagsElements = [];\r\n    if (Object.keys(tags).length !== 0) {\r\n      Object.keys(tags).forEach(id => {\r\n        TagsElements.push(<Tag key={id} title={tags[id]} filter={() => filter(id)}\r\n          deleteData={() => deleteData('tags', id)} />)\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div className=\"notes-viewer\">\r\n        <h1>{ this.state.title }</h1>\r\n        <input type=\"text\" value={ this.state.title } className=\"hidden\" id=\"editNoteTitle\"\r\n         onChange={this.handleChange} name=\"title\" />\r\n        <button className=\"btn btn-red\" onClick={() => deleteData('notes', note.id) }>Del</button>\r\n        <button className=\"btn btn-orange\" onClick={ editNote } id=\"editBtn\">Edit</button>\r\n        <button className=\"btn btn-green hidden\" onClick={() => {this.highlightTags('add'); saveData('notes', note.id)} } id=\"saveBtn\">Save</button>\r\n        <p className=\"textArea\" id=\"noteText\" contentEditable={false} \r\n          onKeyUp={this.handleChange} name=\"text\">{this.props.note.text}</p>\r\n        <div id=\"noteTags\">\r\n          {TagsElements}\r\n        </div>\r\n      </div>\r\n  )}\r\n}","import React from 'react';\n\nimport * as StorageWorker from './utils/StorageWorker';\nimport * as PrepareData from './utils/prepareDataToSave';\nimport * as DomWorker from './utils/domWorker';\nimport TagsFilter from './utils/tagsFilter';\n\nimport NotesList from './components/NotesList';\nimport NotesViewer from './components/NotesViewer';\n\nimport './App.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    StorageWorker.checkData();\n    this.state = {\n      activeNoteId: StorageWorker.firstId('notes'),\n      tags: StorageWorker.getData('tags'),\n      notes: StorageWorker.getData('notes'),\n      filterEnabled: '',\n      noteTags: ''\n    }\n  }\n\n  changeNote = (target) => {\n    DomWorker.editEnd();\n    if (this.state.filterEnabled === '') {\n      this.reReadStorage(target.id);\n    }\n  }\n\n  reReadStorage = (targetId = StorageWorker.firstId('notes')) => {\n    const tags = StorageWorker.getData('tags');\n    const notes = StorageWorker.getData('notes');\n    const noteTags = TagsFilter(tags, notes[targetId].tags.split(','));\n    this.setState({\n      tags,\n      notes,\n      activeNoteId: targetId,\n      noteTags,\n      filterEnabled: ''\n    })\n  }\n\n  deleteData = (key, id) => {\n    StorageWorker.deleteData(key, id);\n    this.setState({filterEnabled: ''});\n    this.reReadStorage();\n  }\n\n  saveData = (key, id) => {\n    const dataToSave = key === 'tags' ? PrepareData.formatTag() : PrepareData.getNoteObj(id);\n    StorageWorker.saveData(key, dataToSave, id);\n    DomWorker.editEnd();\n    if (this.state.filterEnabled === '') {\n      this.reReadStorage(this.state.activeNoteId);\n    } else {\n      this.filter(this.state.filterEnabled);\n      this.setState({activeNoteId: this.state.activeNoteId});\n    }\n  }\n\n  newNote = () => {\n    DomWorker.editStart();\n    DomWorker.clearAllInputs();\n    document.getElementById('editNoteTitle').value = document.getElementById('newNoteTitle').value;\n    document.querySelectorAll('#noteTags span').forEach(el => el.innerHTML = '');\n    const newId = StorageWorker.newId('notes');\n    const emptyNote = PrepareData.getNoteObj(newId);\n    StorageWorker.saveData('notes', emptyNote, newId);\n    this.reReadStorage(newId);\n  }\n\n  autoTagCreate = (newTagsNote) => {\n    const { activeNoteId, notes, tags } = this.state;\n    const savedTags = Object.values(tags);\n    const newTagsTotal = newTagsNote.filter(i => !savedTags.includes(i));\n    newTagsTotal.map(i => PrepareData.formatTag(i));\n    const newTagsTotalUnique = PrepareData.uniqueArr(newTagsTotal);\n    newTagsTotalUnique.forEach(tag => StorageWorker.saveData('tags', tag));\n    const modifNote = PrepareData.injectTags(notes[activeNoteId], newTagsNote);\n    StorageWorker.saveData('notes', modifNote, activeNoteId);\n    this.reReadStorage(activeNoteId);\n    StorageWorker.clearUnusedTags();\n  }\n\n  filter = (id) => {\n    if (id === null) {\n      this.reReadStorage();\n      this.setState({ filterEnabled: ''})\n      return;\n    }\n    const notes = StorageWorker.getData('notes');\n    const tags = StorageWorker.getData('tags');\n    const filteredNotes = {};\n    for (const noteId in notes) {\n      if (notes[noteId].tags.split(',').includes(tags[id])) {\n        filteredNotes[noteId] = notes[noteId];\n      }\n    }\n    if (Object.keys(filteredNotes).length !== 0) {\n      this.setState({ activeNoteId: Object.keys(filteredNotes)[0], \n        notes: filteredNotes,\n        filterEnabled: tags[id],\n        noteTags: TagsFilter(tags, filteredNotes[Object.keys(filteredNotes)[0]].tags.split(',')) });\n    } else {\n      this.deleteData('tags', id);\n    }\n  }\n\n  render() {\n    const { activeNoteId, tags, notes, filterEnabled, noteTags } = this.state;\n    return (\n    <div className=\"App\">\n      <NotesList\n        activeNoteId={ activeNoteId }\n        notes={ notes } \n        tags={ tags } \n        onChange={ this.changeNote }\n        deleteData={this.deleteData }\n        saveData={ this.saveData }\n        newNote={ this.newNote }\n        filter={ this.filter }\n        filterEnabled={ filterEnabled }\n      />\n      <NotesViewer \n        note={ notes[this.state.activeNoteId] } \n        tags={ noteTags }\n        editNote={ DomWorker.editStart } \n        saveData={ this.saveData } \n        deleteData={ this.deleteData }\n        autoTagCreate={ this.autoTagCreate }\n        filter={this.filter}\n      />\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}